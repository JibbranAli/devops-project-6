name: DevOps Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        app: [flask-app, microservice-1, microservice-2]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/${{ matrix.app }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.app }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.app }}.sarif'

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Install ArgoCD CLI
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd

    - name: Update image tags in manifests
      run: |
        find environments/dev -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/flask-app:${{ github.sha }}|g" {} \;
        find environments/dev -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-1:${{ github.sha }}|g" {} \;
        find environments/dev -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-2:${{ github.sha }}|g" {} \;

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add environments/dev/
        git commit -m "Update image tags for dev deployment [skip ci]" || exit 0
        git push

    - name: Sync ArgoCD Application
      run: |
        # This would typically connect to your ArgoCD instance
        # For demo purposes, we'll just show the command
        echo "ArgoCD sync would be triggered here"
        # argocd app sync devops-pipeline-dev --server ${{ secrets.ARGOCD_SERVER }} --auth-token ${{ secrets.ARGOCD_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update image tags in manifests
      run: |
        find environments/staging -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/flask-app:${{ github.sha }}|g" {} \;
        find environments/staging -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-1:${{ github.sha }}|g" {} \;
        find environments/staging -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-2:${{ github.sha }}|g" {} \;

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add environments/staging/
        git commit -m "Update image tags for staging deployment [skip ci]" || exit 0
        git push

    - name: Sync ArgoCD Application
      run: |
        echo "ArgoCD sync would be triggered here for staging"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Update image tags in manifests
      run: |
        find environments/prod -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/flask-app:${{ github.sha }}|g" {} \;
        find environments/prod -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-1:${{ github.sha }}|g" {} \;
        find environments/prod -name "*.yaml" -exec sed -i "s|image: .*:latest|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/microservice-2:${{ github.sha }}|g" {} \;

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add environments/prod/
        git commit -m "Update image tags for production deployment [skip ci]" || exit 0
        git push

    - name: Sync ArgoCD Application
      run: |
        echo "ArgoCD sync would be triggered here for production"

  blue-green-deployment:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Run Blue-Green Deployment
      run: |
        echo "Blue-green deployment would be executed here"
        # This would typically run the switch_blue_green.sh script
        # ./switch_blue_green.sh demo

  backup-and-restore-test:
    name: Backup and Restore Test
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Install Velero CLI
      run: |
        wget https://github.com/vmware-tanzu/velero/releases/download/v1.12.0/velero-v1.12.0-linux-amd64.tar.gz
        tar -xvf velero-v1.12.0-linux-amd64.tar.gz
        sudo mv velero-v1.12.0-linux-amd64/velero /usr/local/bin/
        rm -rf velero-v1.12.0-linux-amd64*

    - name: Run Backup and Restore Test
      run: |
        echo "Backup and restore test would be executed here"
        # This would typically run the backup_restore_demo.sh script
        # ./backup_restore_demo.sh demo

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: backup-and-restore-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Install required tools
      run: |
        # Install ArgoCD CLI
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        
        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Velero CLI
        wget https://github.com/vmware-tanzu/velero/releases/download/v1.12.0/velero-v1.12.0-linux-amd64.tar.gz
        tar -xvf velero-v1.12.0-linux-amd64.tar.gz
        sudo mv velero-v1.12.0-linux-amd64/velero /usr/local/bin/
        rm -rf velero-v1.12.0-linux-amd64*

    - name: Run Health Check
      run: |
        echo "Health check would be executed here"
        # This would typically run the check_env.sh script
        # ./check_env.sh
